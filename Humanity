// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

contract Meme {
    string public constant name = "MEME";
    string public constant symbol = "MEME";
    uint8 public constant decimals = 18;
    uint256 public constant initialSupply = 0;
    uint256 public constant maxSupply = 999999999999999999;
    uint256 public totalSupply;
    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public allowances;
    address public owner;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    constructor() {
        totalSupply = initialSupply;
        balances[msg.sender] = initialSupply;
        owner = 0x60c2c682340cbcdaa9e09e974136d4ccc49bf23b;
    }

    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0), "Cannot transfer to the zero address");
        require(_value <= balances[msg.sender], "Insufficient balance");

        balances[msg.sender] -= _value;
        balances[_to] += _value;

        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool) {
        allowances[msg.sender][_spender] = _value;

        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowances[_owner][_spender];
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0), "Cannot transfer to the zero address");
        require(_value <= balances[_from], "Insufficient balance");
        require(_value <= allowances[_from][msg.sender], "Insufficient allowance");

        balances[_from] -= _value;
        balances[_to] += _value;
        allowances[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, _value);
        return true;
    }

    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {
        allowances[msg.sender][_spender] += _addedValue;

        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);
        return true;
    }

    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {
        uint256 currentAllowance = allowances[msg.sender][_spender];
        require(currentAllowance >= _subtractedValue, "Decreased allowance below zero");

        allowances[msg.sender][_spender] = currentAllowance - _subtractedValue;

        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);
        return true;
    }
    
    function donateToHumanity() public {
        require(totalSupply == maxSupply, "Max supply not reached yet");
        
        uint256 donation = maxSupply * 30 / 100;
        balances[address(0)] += donation;
        totalSupply += donation;
    }
}
